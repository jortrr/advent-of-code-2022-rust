HeightMap:
Sabqponm
abcryxxl
accszExk
acctuvwj
abdefghi

Running the BFS algorithm on Node Point { x: 0, y: 0 }
Processing neighbour Node Point { x: 0, y: 1 }, added Node to self.queue.
Processing neighbour Node Point { x: 1, y: 0 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 0, y: 1 }
Processing neighbour Node Point { x: 0, y: 0 }
Processing neighbour Node Point { x: 0, y: 2 }, added Node to self.queue.
Processing neighbour Node Point { x: 1, y: 1 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 1, y: 0 }
Processing neighbour Node Point { x: 1, y: 1 }
Processing neighbour Node Point { x: 0, y: 0 }
Processing neighbour Node Point { x: 2, y: 0 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 0, y: 2 }
Processing neighbour Node Point { x: 0, y: 1 }
Processing neighbour Node Point { x: 0, y: 3 }, added Node to self.queue.
Processing neighbour Node Point { x: 1, y: 2 }

Running the BFS algorithm on Node Point { x: 1, y: 1 }
Processing neighbour Node Point { x: 1, y: 0 }
Processing neighbour Node Point { x: 1, y: 2 }, added Node to self.queue.
Processing neighbour Node Point { x: 0, y: 1 }
Processing neighbour Node Point { x: 2, y: 1 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 2, y: 0 }
Processing neighbour Node Point { x: 2, y: 1 }
Processing neighbour Node Point { x: 1, y: 0 }
Processing neighbour Node Point { x: 3, y: 0 }

Running the BFS algorithm on Node Point { x: 0, y: 3 }
Processing neighbour Node Point { x: 0, y: 2 }
Processing neighbour Node Point { x: 0, y: 4 }, added Node to self.queue.
Processing neighbour Node Point { x: 1, y: 3 }

Running the BFS algorithm on Node Point { x: 1, y: 2 }
Processing neighbour Node Point { x: 1, y: 1 }
Processing neighbour Node Point { x: 1, y: 3 }, added Node to self.queue.
Processing neighbour Node Point { x: 0, y: 2 }
Processing neighbour Node Point { x: 2, y: 2 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 2, y: 1 }
Processing neighbour Node Point { x: 2, y: 0 }
Processing neighbour Node Point { x: 2, y: 2 }
Processing neighbour Node Point { x: 1, y: 1 }
Processing neighbour Node Point { x: 3, y: 1 }

Running the BFS algorithm on Node Point { x: 0, y: 4 }
Processing neighbour Node Point { x: 0, y: 3 }
Processing neighbour Node Point { x: 1, y: 4 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 1, y: 3 }
Processing neighbour Node Point { x: 1, y: 2 }
Processing neighbour Node Point { x: 1, y: 4 }
Processing neighbour Node Point { x: 0, y: 3 }
Processing neighbour Node Point { x: 2, y: 3 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 2, y: 2 }
Processing neighbour Node Point { x: 2, y: 1 }
Processing neighbour Node Point { x: 2, y: 3 }
Processing neighbour Node Point { x: 1, y: 2 }
Processing neighbour Node Point { x: 3, y: 2 }

Running the BFS algorithm on Node Point { x: 1, y: 4 }
Processing neighbour Node Point { x: 1, y: 3 }
Processing neighbour Node Point { x: 0, y: 4 }
Processing neighbour Node Point { x: 2, y: 4 }

Running the BFS algorithm on Node Point { x: 2, y: 3 }
Processing neighbour Node Point { x: 2, y: 2 }
Processing neighbour Node Point { x: 2, y: 4 }, added Node to self.queue.
Processing neighbour Node Point { x: 1, y: 3 }
Processing neighbour Node Point { x: 3, y: 3 }

Running the BFS algorithm on Node Point { x: 2, y: 4 }
Processing neighbour Node Point { x: 2, y: 3 }
Processing neighbour Node Point { x: 1, y: 4 }
Processing neighbour Node Point { x: 3, y: 4 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 3, y: 4 }
Processing neighbour Node Point { x: 3, y: 3 }
Processing neighbour Node Point { x: 2, y: 4 }
Processing neighbour Node Point { x: 4, y: 4 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 4, y: 4 }
Processing neighbour Node Point { x: 4, y: 3 }
Processing neighbour Node Point { x: 3, y: 4 }
Processing neighbour Node Point { x: 5, y: 4 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 5, y: 4 }
Processing neighbour Node Point { x: 5, y: 3 }
Processing neighbour Node Point { x: 4, y: 4 }
Processing neighbour Node Point { x: 6, y: 4 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 6, y: 4 }
Processing neighbour Node Point { x: 6, y: 3 }
Processing neighbour Node Point { x: 5, y: 4 }
Processing neighbour Node Point { x: 7, y: 4 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 7, y: 4 }
Processing neighbour Node Point { x: 7, y: 3 }, added Node to self.queue.
Processing neighbour Node Point { x: 6, y: 4 }

Running the BFS algorithm on Node Point { x: 7, y: 3 }
Processing neighbour Node Point { x: 7, y: 2 }, added Node to self.queue.
Processing neighbour Node Point { x: 7, y: 4 }
Processing neighbour Node Point { x: 6, y: 3 }

Running the BFS algorithm on Node Point { x: 7, y: 2 }
Processing neighbour Node Point { x: 7, y: 1 }, added Node to self.queue.
Processing neighbour Node Point { x: 7, y: 3 }
Processing neighbour Node Point { x: 6, y: 2 }

Running the BFS algorithm on Node Point { x: 7, y: 1 }
Processing neighbour Node Point { x: 7, y: 0 }, added Node to self.queue.
Processing neighbour Node Point { x: 7, y: 2 }
Processing neighbour Node Point { x: 6, y: 1 }

Running the BFS algorithm on Node Point { x: 7, y: 0 }
Processing neighbour Node Point { x: 7, y: 1 }
Processing neighbour Node Point { x: 6, y: 0 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 6, y: 0 }
Processing neighbour Node Point { x: 6, y: 1 }
Processing neighbour Node Point { x: 5, y: 0 }, added Node to self.queue.
Processing neighbour Node Point { x: 7, y: 0 }

Running the BFS algorithm on Node Point { x: 5, y: 0 }
Processing neighbour Node Point { x: 5, y: 1 }
Processing neighbour Node Point { x: 4, y: 0 }, added Node to self.queue.
Processing neighbour Node Point { x: 6, y: 0 }

Running the BFS algorithm on Node Point { x: 4, y: 0 }
Processing neighbour Node Point { x: 4, y: 1 }
Processing neighbour Node Point { x: 3, y: 0 }, added Node to self.queue.
Processing neighbour Node Point { x: 5, y: 0 }

Running the BFS algorithm on Node Point { x: 3, y: 0 }
Processing neighbour Node Point { x: 3, y: 1 }, added Node to self.queue.
Processing neighbour Node Point { x: 2, y: 0 }
Processing neighbour Node Point { x: 4, y: 0 }

Running the BFS algorithm on Node Point { x: 3, y: 1 }
Processing neighbour Node Point { x: 3, y: 0 }
Processing neighbour Node Point { x: 3, y: 2 }, added Node to self.queue.
Processing neighbour Node Point { x: 2, y: 1 }
Processing neighbour Node Point { x: 4, y: 1 }

Running the BFS algorithm on Node Point { x: 3, y: 2 }
Processing neighbour Node Point { x: 3, y: 1 }
Processing neighbour Node Point { x: 3, y: 3 }, added Node to self.queue.
Processing neighbour Node Point { x: 2, y: 2 }
Processing neighbour Node Point { x: 4, y: 2 }

Running the BFS algorithm on Node Point { x: 3, y: 3 }
Processing neighbour Node Point { x: 3, y: 2 }
Processing neighbour Node Point { x: 3, y: 4 }
Processing neighbour Node Point { x: 2, y: 3 }
Processing neighbour Node Point { x: 4, y: 3 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 4, y: 3 }
Processing neighbour Node Point { x: 4, y: 2 }
Processing neighbour Node Point { x: 4, y: 4 }
Processing neighbour Node Point { x: 3, y: 3 }
Processing neighbour Node Point { x: 5, y: 3 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 5, y: 3 }
Processing neighbour Node Point { x: 5, y: 2 }
Processing neighbour Node Point { x: 5, y: 4 }
Processing neighbour Node Point { x: 4, y: 3 }
Processing neighbour Node Point { x: 6, y: 3 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 6, y: 3 }
Processing neighbour Node Point { x: 6, y: 2 }, added Node to self.queue.
Processing neighbour Node Point { x: 6, y: 4 }
Processing neighbour Node Point { x: 5, y: 3 }
Processing neighbour Node Point { x: 7, y: 3 }

Running the BFS algorithm on Node Point { x: 6, y: 2 }
Processing neighbour Node Point { x: 6, y: 1 }, added Node to self.queue.
Processing neighbour Node Point { x: 6, y: 3 }
Processing neighbour Node Point { x: 5, y: 2 }
Processing neighbour Node Point { x: 7, y: 2 }

Running the BFS algorithm on Node Point { x: 6, y: 1 }
Processing neighbour Node Point { x: 6, y: 0 }
Processing neighbour Node Point { x: 6, y: 2 }
Processing neighbour Node Point { x: 5, y: 1 }, added Node to self.queue.
Processing neighbour Node Point { x: 7, y: 1 }

Running the BFS algorithm on Node Point { x: 5, y: 1 }
Processing neighbour Node Point { x: 5, y: 0 }
Processing neighbour Node Point { x: 5, y: 2 }
Processing neighbour Node Point { x: 4, y: 1 }, added Node to self.queue.
Processing neighbour Node Point { x: 6, y: 1 }

Running the BFS algorithm on Node Point { x: 4, y: 1 }
Processing neighbour Node Point { x: 4, y: 0 }
Processing neighbour Node Point { x: 4, y: 2 }, added Node to self.queue.
Processing neighbour Node Point { x: 3, y: 1 }
Processing neighbour Node Point { x: 5, y: 1 }

Running the BFS algorithm on Node Point { x: 4, y: 2 }
Processing neighbour Node Point { x: 4, y: 1 }
Processing neighbour Node Point { x: 4, y: 3 }
Processing neighbour Node Point { x: 3, y: 2 }
Processing neighbour Node Point { x: 5, y: 2 }, added Node to self.queue.

Running the BFS algorithm on Node Point { x: 5, y: 2 }
Processing neighbour Node Point { x: 5, y: 1 }
Processing neighbour Node Point { x: 5, y: 3 }
Processing neighbour Node Point { x: 4, y: 2 }
Processing neighbour Node Point { x: 6, y: 2 }

HeightMap distances:
[0]	[1]	[2]	[19]	[18]	[17]	[16]	[15]	
[1]	[2]	[3]	[20]	[29]	[28]	[27]	[14]	
[2]	[3]	[4]	[21]	[30]	[31]	[26]	[13]	
[3]	[4]	[5]	[22]	[23]	[24]	[25]	[12]	
[4]	[5]	[6]	[7]	[8]	[9]	[10]	[11]	
The shortest distance from 'S' to 'E' is 31.
